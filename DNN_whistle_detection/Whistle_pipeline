{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7e4bdf02",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-05-21T13:27:27.146561Z",
     "iopub.status.busy": "2024-05-21T13:27:27.146080Z",
     "iopub.status.idle": "2024-05-21T13:27:54.150061Z",
     "shell.execute_reply": "2024-05-21T13:27:54.148623Z"
    },
    "papermill": {
     "duration": 27.013592,
     "end_time": "2024-05-21T13:27:54.153288",
     "exception": false,
     "start_time": "2024-05-21T13:27:27.139696",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r\n",
      "\r\n",
      "\r\n",
      "git is already the newest version (1:2.25.1-1ubuntu3.11).\r\n",
      "0 upgraded, 0 newly installed, 0 to remove and 54 not upgraded.\r\n",
      "Initialized empty Git repository in /kaggle/working/Pipeline_extraction/.git/\r\n",
      "/kaggle/working/Pipeline_extraction\n",
      "Updating origin\r\n",
      "remote: Enumerating objects: 9239, done.\u001b[K\r\n",
      "remote: Counting objects: 100% (1834/1834), done.\u001b[K\r\n",
      "remote: Compressing objects: 100% (883/883), done.\u001b[K\r\n",
      "remote: Total 9239 (delta 934), reused 1815 (delta 918), pack-reused 7405\u001b[K\r\n",
      "Receiving objects: 100% (9239/9239), 613.99 MiB | 42.46 MiB/s, done.\r\n",
      "Resolving deltas: 100% (934/934), done.\r\n",
      "From https://github.com/AEmanuelli/Dolphins\r\n",
      " * [new branch]      main               -> origin/main\r\n",
      " * [new branch]      previous_structure -> origin/previous_structure\r\n",
      " * [new branch]      restructuration    -> origin/restructuration\r\n",
      "From https://github.com/AEmanuelli/Dolphins\r\n",
      " * branch            main       -> FETCH_HEAD\r\n",
      " __init__.py\t  predict_and_extract_online.py   utils.py\r\n",
      " main.py\t  predict_online.py\t\t 'vid'$'\\303\\251''oaudio.py'\r\n",
      " maintenance.py   process_predictions.py\r\n"
     ]
    }
   ],
   "source": [
    "# Installer git\n",
    "!apt-get install git\n",
    "\n",
    "# Initialiser un nouveau dépôt git\n",
    "!git init Pipeline_extraction\n",
    "%cd /kaggle/working/Pipeline_extraction\n",
    "\n",
    "# Configurer sparse-checkout\n",
    "!git config core.sparseCheckout true\n",
    "\n",
    "# Ajouter l'URL du dépôt distant\n",
    "!git remote add -f origin https://github.com/AEmanuelli/Dolphins.git\n",
    "\n",
    "# Spécifier le chemin du sous-répertoire à cloner\n",
    "!echo \"DNN_whistle_detection/Predict_and_extract\" > .git/info/sparse-checkout\n",
    "\n",
    "# Tirer les fichiers du sous-répertoire spécifié\n",
    "!git pull origin main\n",
    "\n",
    "# Vérifier que les fichiers ont été clonés\n",
    "!ls DNN_whistle_detection/Predict_and_extract"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0e2820e4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T13:27:54.186914Z",
     "iopub.status.busy": "2024-05-21T13:27:54.186426Z",
     "iopub.status.idle": "2024-05-21T13:28:33.313873Z",
     "shell.execute_reply": "2024-05-21T13:28:33.312662Z"
    },
    "papermill": {
     "duration": 39.1482,
     "end_time": "2024-05-21T13:28:33.317687",
     "exception": false,
     "start_time": "2024-05-21T13:27:54.169487",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting moviepy\r\n",
      "  Downloading moviepy-1.0.3.tar.gz (388 kB)\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m388.3/388.3 kB\u001b[0m \u001b[31m8.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l-\b \bdone\r\n",
      "\u001b[?25hCollecting keras==2.15.0\r\n",
      "  Downloading keras-2.15.0-py3-none-any.whl.metadata (2.4 kB)\r\n",
      "Requirement already satisfied: tensorflow==2.15.0 in /opt/conda/lib/python3.10/site-packages (2.15.0)\r\n",
      "Requirement already satisfied: absl-py>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (1.4.0)\r\n",
      "Requirement already satisfied: astunparse>=1.6.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (1.6.3)\r\n",
      "Requirement already satisfied: flatbuffers>=23.5.26 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (23.5.26)\r\n",
      "Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (0.5.4)\r\n",
      "Requirement already satisfied: google-pasta>=0.1.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (0.2.0)\r\n",
      "Requirement already satisfied: h5py>=2.9.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (3.10.0)\r\n",
      "Requirement already satisfied: libclang>=13.0.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (16.0.6)\r\n",
      "Requirement already satisfied: ml-dtypes~=0.2.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (0.2.0)\r\n",
      "Requirement already satisfied: numpy<2.0.0,>=1.23.5 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (1.26.4)\r\n",
      "Requirement already satisfied: opt-einsum>=2.3.2 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (3.3.0)\r\n",
      "Requirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (21.3)\r\n",
      "Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (3.20.3)\r\n",
      "Requirement already satisfied: setuptools in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (69.0.3)\r\n",
      "Requirement already satisfied: six>=1.12.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (1.16.0)\r\n",
      "Requirement already satisfied: termcolor>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (2.4.0)\r\n",
      "Requirement already satisfied: typing-extensions>=3.6.6 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (4.9.0)\r\n",
      "Requirement already satisfied: wrapt<1.15,>=1.11.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (1.14.1)\r\n",
      "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (0.35.0)\r\n",
      "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (1.60.0)\r\n",
      "Requirement already satisfied: tensorboard<2.16,>=2.15 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (2.15.1)\r\n",
      "Requirement already satisfied: tensorflow-estimator<2.16,>=2.15.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.15.0) (2.15.0)\r\n",
      "Collecting decorator<5.0,>=4.0.2 (from moviepy)\r\n",
      "  Downloading decorator-4.4.2-py2.py3-none-any.whl.metadata (4.2 kB)\r\n",
      "Requirement already satisfied: tqdm<5.0,>=4.11.2 in /opt/conda/lib/python3.10/site-packages (from moviepy) (4.66.1)\r\n",
      "Requirement already satisfied: requests<3.0,>=2.8.1 in /opt/conda/lib/python3.10/site-packages (from moviepy) (2.31.0)\r\n",
      "Collecting proglog<=1.0.0 (from moviepy)\r\n",
      "  Downloading proglog-0.1.10-py3-none-any.whl.metadata (639 bytes)\r\n",
      "Requirement already satisfied: imageio<3.0,>=2.5 in /opt/conda/lib/python3.10/site-packages (from moviepy) (2.33.1)\r\n",
      "Collecting imageio_ffmpeg>=0.2.0 (from moviepy)\r\n",
      "  Downloading imageio_ffmpeg-0.4.9-py3-none-manylinux2010_x86_64.whl.metadata (1.7 kB)\r\n",
      "Requirement already satisfied: wheel<1.0,>=0.23.0 in /opt/conda/lib/python3.10/site-packages (from astunparse>=1.6.0->tensorflow==2.15.0) (0.42.0)\r\n",
      "Requirement already satisfied: pillow>=8.3.2 in /opt/conda/lib/python3.10/site-packages (from imageio<3.0,>=2.5->moviepy) (9.5.0)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests<3.0,>=2.8.1->moviepy) (3.3.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests<3.0,>=2.8.1->moviepy) (3.6)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests<3.0,>=2.8.1->moviepy) (1.26.18)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests<3.0,>=2.8.1->moviepy) (2024.2.2)\r\n",
      "Requirement already satisfied: google-auth<3,>=1.6.3 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow==2.15.0) (2.26.1)\r\n",
      "Requirement already satisfied: google-auth-oauthlib<2,>=0.5 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow==2.15.0) (1.2.0)\r\n",
      "Requirement already satisfied: markdown>=2.6.8 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow==2.15.0) (3.5.2)\r\n",
      "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow==2.15.0) (0.7.2)\r\n",
      "Requirement already satisfied: werkzeug>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow==2.15.0) (3.0.2)\r\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging->tensorflow==2.15.0) (3.1.1)\r\n",
      "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow==2.15.0) (4.2.4)\r\n",
      "Requirement already satisfied: pyasn1-modules>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow==2.15.0) (0.3.0)\r\n",
      "Requirement already satisfied: rsa<5,>=3.1.4 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow==2.15.0) (4.9)\r\n",
      "Requirement already satisfied: requests-oauthlib>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow==2.15.0) (1.3.1)\r\n",
      "Requirement already satisfied: MarkupSafe>=2.1.1 in /opt/conda/lib/python3.10/site-packages (from werkzeug>=1.0.1->tensorboard<2.16,>=2.15->tensorflow==2.15.0) (2.1.3)\r\n",
      "Requirement already satisfied: pyasn1<0.6.0,>=0.4.6 in /opt/conda/lib/python3.10/site-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow==2.15.0) (0.5.1)\r\n",
      "Requirement already satisfied: oauthlib>=3.0.0 in /opt/conda/lib/python3.10/site-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow==2.15.0) (3.2.2)\r\n",
      "Downloading keras-2.15.0-py3-none-any.whl (1.7 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.7/1.7 MB\u001b[0m \u001b[31m26.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading decorator-4.4.2-py2.py3-none-any.whl (9.2 kB)\r\n",
      "Downloading imageio_ffmpeg-0.4.9-py3-none-manylinux2010_x86_64.whl (26.9 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m26.9/26.9 MB\u001b[0m \u001b[31m50.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading proglog-0.1.10-py3-none-any.whl (6.1 kB)\r\n",
      "Building wheels for collected packages: moviepy\r\n",
      "  Building wheel for moviepy (setup.py) ... \u001b[?25l-\b \b\\\b \bdone\r\n",
      "\u001b[?25h  Created wheel for moviepy: filename=moviepy-1.0.3-py3-none-any.whl size=110720 sha256=de1cc8b75ba64ef8e4f5313e53403253b1a3c20d7985ad1e311b4a330498ea7b\r\n",
      "  Stored in directory: /root/.cache/pip/wheels/96/32/2d/e10123bd88fbfc02fed53cc18c80a171d3c87479ed845fa7c1\r\n",
      "Successfully built moviepy\r\n",
      "Installing collected packages: proglog, keras, imageio_ffmpeg, decorator, moviepy\r\n",
      "  Attempting uninstall: keras\r\n",
      "    Found existing installation: keras 3.2.1\r\n",
      "    Uninstalling keras-3.2.1:\r\n",
      "      Successfully uninstalled keras-3.2.1\r\n",
      "  Attempting uninstall: decorator\r\n",
      "    Found existing installation: decorator 5.1.1\r\n",
      "    Uninstalling decorator-5.1.1:\r\n",
      "      Successfully uninstalled decorator-5.1.1\r\n",
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "tensorflow-decision-forests 1.8.1 requires wurlitzer, which is not installed.\u001b[0m\u001b[31m\r\n",
      "\u001b[0mSuccessfully installed decorator-4.4.2 imageio_ffmpeg-0.4.9 keras-2.15.0 moviepy-1.0.3 proglog-0.1.10\r\n"
     ]
    }
   ],
   "source": [
    "!pip install moviepy keras==2.15.0 tensorflow==2.15.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "08cff4de",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T13:28:33.361970Z",
     "iopub.status.busy": "2024-05-21T13:28:33.361548Z",
     "iopub.status.idle": "2024-05-21T13:28:33.427914Z",
     "shell.execute_reply": "2024-05-21T13:28:33.427044Z"
    },
    "papermill": {
     "duration": 0.089293,
     "end_time": "2024-05-21T13:28:33.430344",
     "exception": false,
     "start_time": "2024-05-21T13:28:33.341051",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Created 13 files in '/kaggle/working/' directory.\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "\n",
    "def split_files_into_chunks(directory_path, chunk_size=12, output_directory='output'):\n",
    "    \"\"\"\n",
    "    Splits the list of files in the specified directory into chunks and writes each chunk to a separate text file.\n",
    "\n",
    "    :param directory_path: Path to the directory containing the files.\n",
    "    :param chunk_size: Number of files per chunk.\n",
    "    :param output_directory: Directory to save the output text files.\n",
    "    \"\"\"\n",
    "    # Get the list of files in the directory\n",
    "    file_list = [os.path.join(directory_path, file) for file in os.listdir(directory_path)]\n",
    "    \n",
    "    # Split the list into chunks of specified size\n",
    "    chunks = [file_list[i:i + chunk_size] for i in range(0, len(file_list), chunk_size)]\n",
    "    \n",
    "    # Create the output directory if it does not exist\n",
    "    os.makedirs(output_directory, exist_ok=True)\n",
    "    \n",
    "    # Create text files for each chunk\n",
    "    for idx, chunk in enumerate(chunks):\n",
    "        chunk_file_path = os.path.join(output_directory, f'file_list_{idx + 1}.txt')\n",
    "        with open(chunk_file_path, 'w') as file:\n",
    "            for filename in chunk:\n",
    "                file.write(filename + '\\n')\n",
    "    \n",
    "    print(f\"Created {len(chunks)} files in '{output_directory}' directory.\")\n",
    "\n",
    "# Example usage\n",
    "directory_path = '/kaggle/input/batch01'  # Change this to your directory path\n",
    "output_directory = '/kaggle/working/'  # Change this to your desired output directory\n",
    "\n",
    "split_files_into_chunks(directory_path, chunk_size=12, output_directory=output_directory)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c8d7fdca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T13:28:33.472266Z",
     "iopub.status.busy": "2024-05-21T13:28:33.471847Z",
     "iopub.status.idle": "2024-05-21T13:52:42.731341Z",
     "shell.execute_reply": "2024-05-21T13:52:42.728547Z"
    },
    "papermill": {
     "duration": 1449.285572,
     "end_time": "2024-05-21T13:52:42.735594",
     "exception": false,
     "start_time": "2024-05-21T13:28:33.450022",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2024-05-21 13:28:40.654758: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\r\n",
      "2024-05-21 13:28:40.654935: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\r\n",
      "2024-05-21 13:28:40.801013: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\r\n",
      "Files that are not going to be processed right now :   0%|\u001b[32m \u001b[0m| 0/150 [00:00<?, ?it\u001b[0mProcessing: /kaggle/input/batch01/Exp_06_Mar_2021_1745pm\r\n",
      "Processing: /kaggle/input/batch01/Exp_16_Mar_2021_1045am\r\n",
      "Processing: /kaggle/input/batch01/Exp_01_Mar_2021_0945am\r\n",
      "Processing: /kaggle/input/batch01/Exp_17_Mar_2021_0745am\r\n",
      "Processing: /kaggle/input/batch01/Exp_04_Mar_2021_1145am\r\n",
      "Processing: /kaggle/input/batch01/Exp_17_Mar_2021_1445pm\r\n",
      "Processing: /kaggle/input/batch01/Exp_07_Mar_2021_0745am\r\n",
      "Processing: /kaggle/input/batch01/Exp_06_Mar_2021_1145am\r\n",
      "\r\n",
      "Batches for None:   0%|\u001b[34m                                 \u001b[0m| 0/118 [00:00<?, ?it/s]\u001b[0m\u001b[A\r\n",
      "\r\n",
      "Batches for None:   0%|\u001b[34m                                 \u001b[0m| 0/118 [00:00<?, ?it/s]\u001b[0m\u001b[A\u001b[A\r\n",
      "\r\n",
      "\r\n",
      "Batches for None:   0%|\u001b[34m                                 \u001b[0m| 0/118 [00:00<?, ?it/s]\u001b[0m\u001b[A\u001b[A\u001b[A\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Batches for None:   0%|\u001b[34m                                 \u001b[0m| 0/118 [00:00<?, ?it/s]\u001b[0m\u001b[A\u001b[A\u001b[A\u001b[A\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Batches for None:   0%|\u001b[34m                                 \u001b[0m| 0/118 [00:00<?, ?it/s]\u001b[0m\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Batches for None:   0%|\u001b[34m                                 \u001b[0m| 0/118 [00:00<?, ?it/s]\u001b[0m\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Batches for None:   0%|\u001b[34m                                 \u001b[0m| 0/118 [00:00<?, ?it/s]\u001b[0m\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Batches for None:   0%|\u001b[34m                                 \u001b[0m| 0/118 [00:00<?, ?it/s]\u001b[0m\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\r\n",
      "\r\n",
      "Files that are not going to be processed right now :   1%|\u001b[32m \u001b[0m| 1/150 [02:22<5:52:5\u001b[0mProcessing: /kaggle/input/batch01/Exp_05_Mar_2021_1445pm\r\n",
      "Files that are not going to be processed right now :   1%|\u001b[32m \u001b[0m| 1/150 [02:22<5:52:5\u001b[0m\r\n",
      "Batches for None:   0%|\u001b[34m                                 \u001b[0m| 0/118 [00:00<?, ?it/s]\u001b[0m\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Batches for None:   1%|\u001b[34m▏                     \u001b[0m| 1/118 [02:48<5:28:25, 168.42s/it]\u001b[0m\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\r\n",
      "\r\n",
      "\r\n",
      "Batches for None:   1%|\u001b[34m▏                     \u001b[0m| 1/118 [03:14<6:18:32, 194.12s/it]\u001b[0m\u001b[A\u001b[A\u001b[A\r\n",
      "Batches for None:   1%|\u001b[34m▏                     \u001b[0m| 1/118 [03:14<6:18:46, 194.25s/it]\u001b[0m\u001b[A\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "                                                                                \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[AProcessing: /kaggle/input/batch01/Exp_02_Mar_2021_1045am\r\n",
      "\r\n",
      "\r\n",
      "Batches for None:   0%|\u001b[34m                                 \u001b[0m| 0/118 [00:00<?, ?it/s]\u001b[0m\u001b[A\u001b[A\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Batches for None:   1%|\u001b[34m▏                     \u001b[0m| 1/118 [03:48<7:24:53, 228.15s/it]\u001b[0m\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Batches for None:   1%|\u001b[34m▏                     \u001b[0m| 1/118 [03:48<7:25:54, 228.67s/it]\u001b[0m\u001b[A\u001b[A\u001b[A\u001b[A\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "                                                                                \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[AProcessing: /kaggle/input/batch01/Exp_05_Mar_2021_0945am\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Processing: /kaggle/input/batch01/Exp_16_Mar_2021_0645am\r\n",
      "Batches for None:   0%|\u001b[34m                                 \u001b[0m| 0/118 [00:00<?, ?it/s]\u001b[0m\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Batches for None:   2%|\u001b[34m▎                     \u001b[0m| 2/118 [05:42<5:32:00, 171.73s/it]\u001b[0m\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\r\n",
      "\r\n",
      "\r\n",
      "Batches for None:   2%|\u001b[34m▎                     \u001b[0m| 2/118 [05:56<5:38:44, 175.21s/it]\u001b[0m\u001b[A\u001b[A\u001b[A\r\n",
      "                                                                                \u001b[A\r\n",
      "\r\n",
      "                                                                                \u001b[A\u001b[A\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "                                                                                \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Batches for None:   2%|\u001b[34m▎                     \u001b[0m| 2/118 [06:58<6:37:34, 205.64s/it]\u001b[0m\u001b[A\u001b[A\u001b[A\u001b[A\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Batches for None:   2%|\u001b[34m▎                     \u001b[0m| 2/118 [06:57<6:37:30, 205.61s/it]\u001b[0m\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Batches for None:   3%|\u001b[34m▌                     \u001b[0m| 3/118 [07:01<4:08:17, 129.54s/it]\u001b[0m\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\r\n",
      "\r\n",
      "\r\n",
      "Batches for None:   1%|\u001b[34m▏                     \u001b[0m| 1/118 [03:03<5:57:47, 183.48s/it]\u001b[0m\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Batches for None:   3%|\u001b[34m▌                     \u001b[0m| 3/118 [08:34<4:58:15, 155.61s/it]\u001b[0m\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Batches for None:   3%|\u001b[34m▋                     \u001b[0m| 4/118 [08:43<3:45:17, 118.58s/it]\u001b[0m\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Batches for None:   2%|\u001b[34m▎                     \u001b[0m| 2/118 [04:47<4:24:22, 136.75s/it]\u001b[0m\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "                                                                                \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Batches for None:   3%|\u001b[34m▋                     \u001b[0m| 4/118 [09:59<3:59:04, 125.83s/it]\u001b[0m\u001b[A\u001b[A\u001b[A\u001b[A\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "                                                                                \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Batches for None:   3%|\u001b[34m▌                     \u001b[0m| 3/118 [06:29<3:51:47, 120.93s/it]\u001b[0m\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Batches for None:   3%|\u001b[34m▊                      \u001b[0m| 4/118 [07:10<2:49:37, 89.28s/it]\u001b[0m\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Batches for None:   5%|\u001b[34m█▏                     \u001b[0m| 6/118 [08:29<1:53:49, 60.98s/it]\u001b[0m\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Batches for None:   6%|\u001b[34m█▎                     \u001b[0m| 7/118 [09:10<1:41:13, 54.71s/it]\u001b[0m\r\n",
      "\r\n",
      "\r\n",
      "\r\n",
      "Traceback (most recent call last):\r\n",
      "  File \"/kaggle/working/Pipeline_extraction/DNN_whistle_detection/Predict_and_extract/main.py\", line 45, in <module>\r\n",
      "    process_predict_extract(args.recordings, args.saving_folder, args.start_time, args.end_time, args.batch_size, args.save, args.save_p, args.model_path, args.max_workers, specific_files = specific_files)\r\n",
      "  File \"/kaggle/working/Pipeline_extraction/DNN_whistle_detection/Predict_and_extract/predict_and_extract_online.py\", line 132, in process_predict_extract\r\n",
      "    future.result()\r\n",
      "  File \"/opt/conda/lib/python3.10/concurrent/futures/_base.py\", line 451, in result\r\n",
      "    return self.__get_result()\r\n",
      "  File \"/opt/conda/lib/python3.10/concurrent/futures/_base.py\", line 403, in __get_result\r\n",
      "    raise self._exception\r\n",
      "  File \"/opt/conda/lib/python3.10/concurrent/futures/thread.py\", line 58, in run\r\n",
      "    result = self.fn(*self.args, **self.kwargs)\r\n",
      "  File \"/kaggle/working/Pipeline_extraction/DNN_whistle_detection/Predict_and_extract/predict_and_extract_online.py\", line 94, in process_predict_extract_worker\r\n",
      "    record_names, positive_initial, positive_finish, class_1_scores = process_and_predict(file_path, batch_duration, start_time, end_time, batch_size, model, save_p, saving_folder_file)\r\n",
      "  File \"/kaggle/working/Pipeline_extraction/DNN_whistle_detection/Predict_and_extract/predict_and_extract_online.py\", line 74, in process_and_predict\r\n",
      "    os.makedirs(saving_positive)\r\n",
      "  File \"/opt/conda/lib/python3.10/os.py\", line 215, in makedirs\r\n",
      "    makedirs(head, exist_ok=exist_ok)\r\n",
      "  File \"/opt/conda/lib/python3.10/os.py\", line 225, in makedirs\r\n",
      "    mkdir(name, mode)\r\n",
      "OSError: [Errno 30] Read-only file system: '/kaggle/input/batch01/Exp_01_Mar_2021_0945am'\r\n"
     ]
    }
   ],
   "source": [
    "!python DNN_whistle_detection/Predict_and_extract/main.py \\\n",
    "    --model_path \"/kaggle/input/cnn_v1_xception/tensorflow2/initial_model/1/model_vgg.h5\" \\\n",
    "    --recordings \"/kaggle/input/batch01/\" \\\n",
    "    --saving_folder \"/kaggle/working/Analyses_alexis/2019_analysed/\" \\\n",
    "    --start_time 0 \\\n",
    "    --batch_size 64 \\\n",
    "    --save False \\\n",
    "    --save_p True \\\n",
    "    --max_workers 8 \\\n",
    "    --specific_files \"/kaggle/working/file_list_1.txt\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "21f1a408",
   "metadata": {
    "papermill": {
     "duration": 0.036816,
     "end_time": "2024-05-21T13:52:42.807974",
     "exception": false,
     "start_time": "2024-05-21T13:52:42.771158",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5036409,
     "sourceId": 8451128,
     "sourceType": "datasetVersion"
    },
    {
     "modelInstanceId": 38718,
     "sourceId": 46185,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelInstanceId": 40717,
     "sourceId": 48683,
     "sourceType": "modelInstanceVersion"
    }
   ],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1519.387111,
   "end_time": "2024-05-21T13:52:43.470445",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-21T13:27:24.083334",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
